grafana:
  enabled: true

  envFromSecret: gitlab-grafana-oauth

  grafana.ini:
    auth:
      # remove the login form from the sign-in page 
      disable_login_form: false

    auth.basic:
      # disable HTTP Basic Authentication
      enabled: true

    auth.gitlab:
      enabled: true
      # # go directly to SSO! (hint: `/login?disableAutoLogin`)
      # auto_login: false
      allow_sign_up: true
      role_attribute_path: contains(groups[*], 'Kube-Mind') && 'Editor' || 'Viewer'
      allowed_groups: Kube-Mind
      auto_assign_org_role: Viewer
      role_attribute_strict: false
      auth_url: https://gitlab.com/oauth/authorize
      token_url: https://gitlab.com/oauth/token
      api_url: https://gitlab.com/api/v4/user
      scopes: openid,email,profile
      
    auth.oauth_generic:
      enabled: true
      # go directly to SSO! üéâ (hint: `/login?disableAutoLogin`)
      auto_login: false

      # there's about to be a üëª JSON query, by setting this to strict,
      # Grafana will reject logins if the expression errors
      # (fail closed)
      role_attribute_strict: true

      # LDAP group -> Grafana role mapping:
      # `grafana_admin` -> Grafana **Server** Admin
      # `grafana_editor` -> Grafana Editor
      # * -> Grafana Viewer
      # role_attribute_path: contains(groups[*], 'grafana_admin') && 'GrafanaAdmin' || contains(groups[*], 'grafana_editor') && 'Editor' || 'Viewer'

      # required for the above query ‚¨ÜÔ∏è to be able to map to Grafana **Server** Admin
      allow_assign_grafana_admin: true
      auth_url: https://gitlab.com/oauth/authorize
      token_url: https://gitlab.com/oauth/token
      api_url: https://gitlab.com/api/v4

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://kube-prometheus-stack-prometheus.kube-prometheus-stack.svc.cluster.local:9090
        access: proxy
        isDefault: true
  dashboards:
    community:
      k8s-dashboard:
        gnetId: 15661
        revision: 2
        datasource: Prometheus
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'community'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 10
        options:
          path: /var/lib/grafana/dashboards/community
    server:
      root_url: https://grafana.jcan.dev
      serve_from_sub_path: false



  ingress:
    enabled: true
    ingressClassName: traefik
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prd
    hosts:
    - grafana.jcan.dev
    tls:
    - secretName: "grafana-tls-key"
      hosts:
      - grafana.jcan.dev

prometheusOperator:
  tls:
    enabled: false
  admissionWebhooks:
    enabled: false

prometheus:
  annotations:
    argocd.argoproj.io/skip-health-check: 'true'
  prometheusSpec:
    podMonitorSelectorNilUsesHelmValues: false
    additionalScrapeConfigs:
    - job_name: gpu-metrics
      scrape_interval: 1s
      metrics_path: /metrics
      scheme: http
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names:
          - nvidia-operator
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_node_name]
        action: replace
        target_label: kubernetes_node

prometheus-node-exporter:
  tolerations:
    - key: node-role.kubernetes.io/control-plane
      operator: Exists
      effect: NoSchedule
    - key: node-role.kubernetes.io/etcd
      operator: Exists
      effect: NoExecute